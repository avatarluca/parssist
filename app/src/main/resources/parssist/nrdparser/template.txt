{{package_name}};


/**
 * A non-recursive predictive parser.
 */
public final class {{parser_name}} {
    private static final String EMPTY_SYMBOL = "$";

    private final List<Production>[][] parseTable = new List<Production>[{{parsetable_y_size}}][{{parsetable_x_size}}];
    private final Stack<Node> stack = new Stack<>();
    private final List<TokenType> tokentypes = new ArrayList<>();
    private final List<Token> alphabet = new ArrayList<>();
    private final List<Token> vocabulary = new ArrayList<>();


    /**
     * Creates a new parser.
     */
    public {{parser_name}}() {
        initParsetable();
        initTokentypes();
        initAlphabet();
        initVocabulary();
    }


    /**
     * Parses an input word and returns the root node.
     * @param w Input word.
     * @return The root node of the generated parsetree.
     * @throws ParseException If there is any error with parsing the given input word.
     */
    public Node parse(final String w) throws ParseException {
        final String w$ = w + EMPTY_SYMBOL;
        final Node root = new Node(new Token(new TokenType("{{start_symbol_name}}", "{{start_symbol_regex}}", 0, false), "{{start_symbol_value}}"));
        final Node empty = new Node(new Token(new TokenType("EMPTY_SYMBOL", "\\$", 0, false), "$"));
        
        stack.clean();
        stack.push(empty);
        stack.push(root);

        computeSystemAnalysis(w$, root);

        return root;
    }   


    /**
     * Compute the system analysis: Checks if a word is valid according to the grammar and in the language of the grammar.
     * It directly changes the given root.
     * @param w$ Modified input word.
     * @param root The root node of the parsetree.
     * @throws ParseException If there is any error with parsing the given input word.
     */
    private void computeSystemAnalysis(final String w$, final Node root) throws ParseException {
        root.cleanChildren();

        int ip = 0; // first symbol of w$
        Node X = stack.peek(); // top of stack
        Node a = new Node(getNextToken(ip, w$)); // symbol of w$
        Node cursor = root;

        do {
            a = new Node(getNextToken(ip));
            cursor = X;
            
            if(a.getToken() == null) throw new ParseException("Invalid Token found at position: " + ip + "\n\n" + w$);

            if(a.getToken().tokenType().ignore() && ip < w$.length() - 1) { // ignore token (e.g. whitespace, empty symbol except the last one ...) 
                ip += a.getToken().symbol().length();
                continue;
            }

            if(isSymbolTerminal(X.getToken().symbol()) || X.getToken().symbol().equals(EMPTY_SYMBOL)) {
                if(X.equals(a)) {
                    stack.pop();

                    updateTree(cursor.getParent(), a);

                    ip += a.getToken().symbol().length();
                } else throw new ParseException(stack);
            } else { 
                try {
                    final Production production = parseTable[vocabulary.indexOf(X.getToken())][alphabet.indexOf(a.getToken())].get(0);

                    if(production == null) throw new ParseException("Parsetable error");

                    stack.pop();
                    
                    final Token[] rhs = production.getRhs().get(0); 
                    for(int i = rhs.length - 1; i >= 0; i--) {
                        final Token tempToken = rhs[i];
                        final Node tempNode = new Node(tempToken);

                        updateTree(cursor, tempNode);

                        stack.push(tempNode); 
                    }
                } catch (IndexOutOfBoundsException e) {
                    throw new ParseException("Parsetable error");
                }
            }

            while(stack.peek().getToken().equals(EMPTY_TOKEN) && stack.size() > 1) updateTree(stack.peek().getParent(), stack.pop());
        } while(!((X = stack.peek()).getToken().equals(EMPTY_TOKEN) && a.getToken().equals(EMPTY_TOKEN))); // stack and input buffer is empty
    }

    /**
     * Eats the next token from the input buffer.
     * @return The next token from the input buffer or null.
     */
    private @Nullable Token getNextToken(final int ip, final String w$) {
        final String tempW$ = w$.substring(ip);

        for(final TokenType tokenType : tokentypes) { 
            if(tokenType.name().equals("NONTERMINAL")) continue; // TODO: Add more nonterminal labels
            final Pattern pattern = Pattern.compile("^" + "(" +  tokenType.regex() + ")");
            final Matcher matcher = pattern.matcher(tempW$);

            if(matcher.find()) {
                final String value = matcher.group();
                return new Token(tokenType, value);
            }
        }

        return null;
    }

    /**
     * Checks if the given symbol is a terminal.
     * @param symbol The symbol which is checked.
     * @return True if the symbol is a terminal, false otherwise.
     */
    private boolean isSymbolTerminal(final String symbol) {
        return alphabet.stream()
                        .map(e -> e.symbol())
                        .anyMatch(e -> e.equals(symbol));
    }

    /**
     * Update the tree.
     * @param root The root of the partition.
     * @param node The token to add.
     */
    private void updateTree(final Node root, final Node node) {
        root.addChild(node);
        node.setParent(root);
    }






    /**
     * ================================
     * INITS
     * ================================
     */


    /**
     * Inits the {@link {{parser_name}}#parseTable}.
     */
    private void initParsetable() {
        {{init_parsetable}}
    }

    /**
     * Inits the {@link {{parser_name}}#tokentypes}.
     */
    private void initTokentypes() {
        {{init_tokentypes}}
    }

    /**
     * Inits the {@link {{parser_name}}#alphabet}.
     */
    private void initAlphabet() {
        {{init_alphabet}}
    }

    /**
     * Inits the {@link {{parser_name}}#vocabulary}.
     */
    private void initVocabulary() {
        {{init_vocabulary}}
    }






    /**
     * ================================
     * UTILS
     * ================================
     */


    /**
     * Defines a token for the lexical analysis.
     */
    private final record Token(TokenType tokenType, String symbol) {
        @Override public boolean equals(Object obj) {
            if (obj instanceof Token) {
                Token other = (Token)obj;
                return this.tokenType.equals(other.tokenType) && this.symbol.equals(other.symbol);
            }

            return false;
        }
    }


    /**
     * Defines a tokentype for the lexical analysis.
     */
    private final record TokenType(String name, String regex, int priority, boolean ignore) {
        @Override public boolean equals(Object obj) {
            if (obj instanceof TokenType) {
                TokenType other = (TokenType)obj;
                return this.name.equals(other.name);
            }

            return false;
        }
    }


    /**
     * Defines a new node for the parsetree.
     */
    private final class Node {
        private final Token token;
        private final List<Node> children;

        private Node parent;


        /**
        * Creates a new node.
        * @param token Token of the node.
        * @param parent Parent of the node.
        * @param children Children of the node.
        */
        public Node(final Token token, final Node parent, final List<Node> children) {
            this.token = token;
            this.parent = parent;
            this.children = children;
        }

        /**
        * Creates a new root node.
        * @param token Token of the node.
        */
        public Node(final Token token) {
            this(token, null, new ArrayList<>());
        }


        public Token getToken() {
            return token;
        }

        public Node getParent() {
            return parent;
        }

        public List<Node> getChildren() {
            return children;
        }

        public void setParent(final Node parent) {
            this.parent = parent;
        }

        
        /**
        * Clean the children of the node.
        */
        public void cleanChildren() {
            children.clear();
        }

        /**
        * Add a child to the node if its not already a child.
        * @param child Child to add.
        */
        public void addChild(final Node child) {
            if(!children.contains(child)) children.add(child);
        }

        /**
        * Remove a child from the node.
        * @param child Child to remove.
        */
        public void removeChild(final Node child) {
            children.remove(child);
        }

        /**
        * Check if the node is a leaf.
        * @return True if the node is a leaf, false otherwise.
        */
        public boolean isLeaf() {
            return children.isEmpty();
        }


        /**
        * Accept a visitor.
        * @param vis The visitor to accept.
        */
        public void accept(final Visitor vis) {
            vis.visit(this);
        }


        @Override public boolean equals(final Object obj) {
            if(obj instanceof Node) {
                final Node other = (Node) obj;
                return this.token.equals(other.token);
            }

            return false;
        }

        @Override public String toString() {
            return token.toString();
        }
    }


    /**
     * Defines the production structure.
     */
    private final class Production {
        private final Token lhs;
        private final List<Token[]> rhs;

    
        /**
         * Creates a new production.
         */
        public Production(final Token lhs, final List<Token[]> rhs) {
            this.lhs = lhs;
            this.rhs = rhs;
        }


        @Override public String toString() {
            final StringBuilder sb = new StringBuilder();

            sb.append(lhs.symbol()).append(" -> ");

            for(int i = 0; i < rhs.size(); i++) {
                for(int j = 0; j < rhs.get(i).length; j++) {
                    sb.append(rhs.get(i)[j].symbol());
                }
                sb.append(" ");
                if(i < rhs.size() - 1) sb.append("| ");
            }

            return sb.toString();
        }


        public Token getLhs() {
            return lhs;
        }

        public List<Token[]> getRhs() {
            return rhs;
        }
    }


    /**
     * Defines a stack.
     * @param <T> Context (contenttype) of the stack.
     */
    public class Stack<T> {
        private List<T> stack;


        /**
        * Creates a new stack.
        */
        public Stack() {
            clean();
        }


        /**
        * Push a token to the stack.
        * @param token The token to push.
        */
        public void push(final T token) {
            stack.add(token);
        }

        /**
        * Pop a token from the stack.
        * @return The popped token.
        */
        public T pop() {
            return stack.remove(stack.size() - 1);
        }

        /**
        * Peek the top token from the stack.
        * @return The peeked token.
        */
        public T peek() {
            return stack.get(stack.size() - 1);
        }

        /**
        * Check if the stack is empty.
        * @return True if the stack is empty, false otherwise.
        */
        public boolean isEmpty() {
            return stack.isEmpty();
        }

        /**
        * Get the size of the stack.
        * @return The size of the stack.
        */
        public int size() {
            return stack.size();
        }

        /**
        * Cleans the stack.
        */
        public void clean() {
            stack = new ArrayList<>();
        } 


        @Override public String toString() {
            return stack.stream()
                        .map(Object::toString)
                        .reduce((a, b) -> a + "\n+ " + b)
                        .orElse("");
        }
    }


    /**
     * Visitor interface.
     */
    public interface Visitor {
        /**
        * Visit the object.
        * @param obj Object to visit.
        */
        public void visit(final Node obj);
    }






    /**
     * ================================
     * CUSTOMIZABLE
     * ================================
     */


    /**
     * Example visitor for {@link Node}.
     * It formats the parsetree to a json.
     */
    private final class JsonTreeVisitor implements Visitor {
        private final JSONObject json;


        /**
        * Creates a new JSON visitor.
        */
        public JsonTreeVisitor() {
            this.json = new JSONObject();
        }


        public JSONObject getJson() {
            return json;
        }


        @Override public void visit(final Node node) {
            final JSONArray kids = new JSONArray();

            if (Node.getChildren().size() > 0) {
                for (Node child : node.getChildren()) {
                    final JsonTreeVisitor visitor = new JsonTreeVisitor();
                    child.accept(visitor);
                    kids.put(visitor.getJson());
                }
            } 

            this.json.put(node.getToken().symbol(), kids);
        }
    }
}